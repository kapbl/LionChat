// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3
// Source: group.proto

package groupclient

import (
	"context"

	"chatLion/rpc/group/group"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateGroupRequest  = group.CreateGroupRequest
	CreateGroupResponse = group.CreateGroupResponse
	DeleteGroupRequest  = group.DeleteGroupRequest
	DeleteGroupResponse = group.DeleteGroupResponse
	GetMembersRequest   = group.GetMembersRequest
	GetMembersResponse  = group.GetMembersResponse
	JoinGroupRequest    = group.JoinGroupRequest
	JoinGroupResponse   = group.JoinGroupResponse

	Group interface {
		GetMembersByGroupID(ctx context.Context, in *GetMembersRequest, opts ...grpc.CallOption) (*GetMembersResponse, error)
		CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error)
		JoinGroup(ctx context.Context, in *JoinGroupRequest, opts ...grpc.CallOption) (*JoinGroupResponse, error)
		DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*DeleteGroupResponse, error)
	}

	defaultGroup struct {
		cli zrpc.Client
	}
)

func NewGroup(cli zrpc.Client) Group {
	return &defaultGroup{
		cli: cli,
	}
}

func (m *defaultGroup) GetMembersByGroupID(ctx context.Context, in *GetMembersRequest, opts ...grpc.CallOption) (*GetMembersResponse, error) {
	client := group.NewGroupClient(m.cli.Conn())
	return client.GetMembersByGroupID(ctx, in, opts...)
}

func (m *defaultGroup) CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error) {
	client := group.NewGroupClient(m.cli.Conn())
	return client.CreateGroup(ctx, in, opts...)
}

func (m *defaultGroup) JoinGroup(ctx context.Context, in *JoinGroupRequest, opts ...grpc.CallOption) (*JoinGroupResponse, error) {
	client := group.NewGroupClient(m.cli.Conn())
	return client.JoinGroup(ctx, in, opts...)
}

func (m *defaultGroup) DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*DeleteGroupResponse, error) {
	client := group.NewGroupClient(m.cli.Conn())
	return client.DeleteGroup(ctx, in, opts...)
}
