// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/protocol/message.proto

package protocol

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Message struct {
	Avatar       string `protobuf:"bytes,1,opt,name=avatar,proto3" json:"avatar,omitempty"`
	FromUsername string `protobuf:"bytes,2,opt,name=fromUsername,proto3" json:"fromUsername,omitempty"`
	From         string `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	To           string `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
	Content      string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	ContentType  int32  `protobuf:"varint,6,opt,name=contentType,proto3" json:"contentType,omitempty"`
	Type         string `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`
	MessageType  int32  `protobuf:"varint,8,opt,name=messageType,proto3" json:"messageType,omitempty"`
	Url          string `protobuf:"bytes,9,opt,name=url,proto3" json:"url,omitempty"`
	FileSuffix   string `protobuf:"bytes,10,opt,name=fileSuffix,proto3" json:"fileSuffix,omitempty"`
	File         []byte `protobuf:"bytes,11,opt,name=file,proto3" json:"file,omitempty"`
	// 消息分片相关字段
	MessageId      string `protobuf:"bytes,12,opt,name=messageId,proto3" json:"messageId,omitempty"`
	IsFragmented   bool   `protobuf:"varint,13,opt,name=isFragmented,proto3" json:"isFragmented,omitempty"`
	FragmentIndex  int32  `protobuf:"varint,14,opt,name=fragmentIndex,proto3" json:"fragmentIndex,omitempty"`
	TotalFragments int32  `protobuf:"varint,15,opt,name=totalFragments,proto3" json:"totalFragments,omitempty"`
	Timestamp      int64  `protobuf:"varint,16,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Checksum       string `protobuf:"bytes,17,opt,name=checksum,proto3" json:"checksum,omitempty"`
	// 消息已读确认相关字段
	AckMessageIds        []string `protobuf:"bytes,18,rep,name=ackMessageIds,proto3" json:"ackMessageIds,omitempty"`
	IsRead               bool     `protobuf:"varint,19,opt,name=isRead,proto3" json:"isRead,omitempty"`
	ReadTimestamp        int64    `protobuf:"varint,20,opt,name=readTimestamp,proto3" json:"readTimestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc7b5b78212a3e3f, []int{0}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *Message) GetFromUsername() string {
	if m != nil {
		return m.FromUsername
	}
	return ""
}

func (m *Message) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *Message) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *Message) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Message) GetContentType() int32 {
	if m != nil {
		return m.ContentType
	}
	return 0
}

func (m *Message) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Message) GetMessageType() int32 {
	if m != nil {
		return m.MessageType
	}
	return 0
}

func (m *Message) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Message) GetFileSuffix() string {
	if m != nil {
		return m.FileSuffix
	}
	return ""
}

func (m *Message) GetFile() []byte {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *Message) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

func (m *Message) GetIsFragmented() bool {
	if m != nil {
		return m.IsFragmented
	}
	return false
}

func (m *Message) GetFragmentIndex() int32 {
	if m != nil {
		return m.FragmentIndex
	}
	return 0
}

func (m *Message) GetTotalFragments() int32 {
	if m != nil {
		return m.TotalFragments
	}
	return 0
}

func (m *Message) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Message) GetChecksum() string {
	if m != nil {
		return m.Checksum
	}
	return ""
}

func (m *Message) GetAckMessageIds() []string {
	if m != nil {
		return m.AckMessageIds
	}
	return nil
}

func (m *Message) GetIsRead() bool {
	if m != nil {
		return m.IsRead
	}
	return false
}

func (m *Message) GetReadTimestamp() int64 {
	if m != nil {
		return m.ReadTimestamp
	}
	return 0
}

func init() {
	proto.RegisterType((*Message)(nil), "protocol.Message")
}

func init() { proto.RegisterFile("pkg/protocol/message.proto", fileDescriptor_fc7b5b78212a3e3f) }

var fileDescriptor_fc7b5b78212a3e3f = []byte{
	// 354 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0xdd, 0x4e, 0xbb, 0x40,
	0x10, 0xc5, 0x43, 0xe9, 0x07, 0x4c, 0x3f, 0xfe, 0xfd, 0xaf, 0xc6, 0x4c, 0x1a, 0x63, 0x48, 0x63,
	0x0c, 0x57, 0xf6, 0xc2, 0x77, 0x30, 0xe9, 0x45, 0x6f, 0xb0, 0x3e, 0xc0, 0x0a, 0x43, 0x25, 0x05,
	0x96, 0xb0, 0x5b, 0x53, 0x9f, 0xd2, 0x57, 0x32, 0x3b, 0x85, 0xb6, 0x78, 0x37, 0xe7, 0x77, 0x38,
	0xbb, 0x67, 0xc8, 0xc2, 0xa2, 0xda, 0xef, 0x56, 0x55, 0xad, 0x8c, 0x8a, 0x55, 0xbe, 0x2a, 0x48,
	0x6b, 0xb9, 0xa3, 0x67, 0x06, 0xc2, 0x6b, 0xf9, 0xf2, 0xa7, 0x0f, 0xa3, 0xcd, 0xc9, 0x13, 0x77,
	0x30, 0x94, 0x5f, 0xd2, 0xc8, 0x1a, 0x9d, 0xc0, 0x09, 0xfd, 0xa8, 0x51, 0x62, 0x09, 0x93, 0xb4,
	0x56, 0xc5, 0xbb, 0xa6, 0xba, 0x94, 0x05, 0x61, 0x8f, 0xdd, 0x0e, 0x13, 0x02, 0xfa, 0x56, 0xa3,
	0xcb, 0x1e, 0xcf, 0x62, 0x06, 0x3d, 0xa3, 0xb0, 0xcf, 0xa4, 0x67, 0x94, 0x40, 0x18, 0xc5, 0xaa,
	0x34, 0x54, 0x1a, 0x1c, 0x30, 0x6c, 0xa5, 0x08, 0x60, 0xdc, 0x8c, 0xdb, 0xef, 0x8a, 0x70, 0x18,
	0x38, 0xe1, 0x20, 0xba, 0x46, 0xf6, 0x7c, 0x63, 0xad, 0xd1, 0xe9, 0x7c, 0x3b, 0xdb, 0x54, 0xb3,
	0x16, 0xa7, 0xbc, 0x53, 0xea, 0x0a, 0x89, 0x39, 0xb8, 0x87, 0x3a, 0x47, 0x9f, 0x43, 0x76, 0x14,
	0x0f, 0x00, 0x69, 0x96, 0xd3, 0xdb, 0x21, 0x4d, 0xb3, 0x23, 0x02, 0x1b, 0x57, 0x84, 0xf7, 0xc8,
	0x72, 0xc2, 0x71, 0xe0, 0x84, 0x93, 0x88, 0x67, 0x71, 0x0f, 0x7e, 0x73, 0xe8, 0x3a, 0xc1, 0x09,
	0x47, 0x2e, 0xc0, 0xfe, 0x9d, 0x4c, 0xbf, 0xd6, 0x72, 0x57, 0x50, 0x69, 0x28, 0xc1, 0x69, 0xe0,
	0x84, 0x5e, 0xd4, 0x61, 0xe2, 0x11, 0xa6, 0x69, 0xa3, 0xd6, 0x65, 0x42, 0x47, 0x9c, 0x71, 0xd7,
	0x2e, 0x14, 0x4f, 0x30, 0x33, 0xca, 0xc8, 0xbc, 0x0d, 0x6a, 0xfc, 0xc7, 0x9f, 0xfd, 0xa1, 0xb6,
	0x8f, 0xc9, 0x0a, 0xd2, 0x46, 0x16, 0x15, 0xce, 0x03, 0x27, 0x74, 0xa3, 0x0b, 0x10, 0x0b, 0xf0,
	0xe2, 0x4f, 0x8a, 0xf7, 0xfa, 0x50, 0xe0, 0x7f, 0x2e, 0x7b, 0xd6, 0xb6, 0x87, 0x8c, 0xf7, 0x9b,
	0xb6, 0xbb, 0x46, 0x11, 0xb8, 0xa1, 0x1f, 0x75, 0xa1, 0x7d, 0x07, 0x99, 0x8e, 0x48, 0x26, 0x78,
	0xc3, 0xbb, 0x34, 0xca, 0xa6, 0x6b, 0x92, 0xc9, 0xf6, 0x7c, 0xf7, 0x2d, 0xdf, 0xdd, 0x85, 0x1f,
	0x43, 0x7e, 0x5b, 0x2f, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x4f, 0x39, 0xbd, 0xe3, 0x80, 0x02,
	0x00, 0x00,
}
