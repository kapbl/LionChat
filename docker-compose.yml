services:
  redis:
    image: redis:6.2-alpine
    container_name: chatLion-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - kafka-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: chatLion-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    networks:
      - kafka-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: chatLion-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      # 日志配置
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
      # 性能优化
      KAFKA_NUM_NETWORK_THREADS: 8
      KAFKA_NUM_IO_THREADS: 8
      KAFKA_SOCKET_SEND_BUFFER_BYTES: 102400
      KAFKA_SOCKET_RECEIVE_BUFFER_BYTES: 102400
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 104857600
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: chatLion-kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - kafka-network

  # 可选：Kafka Manager (另一个管理界面)
  kafka-manager:
    image: hlebalbau/kafka-manager:stable
    container_name: chatLion-kafka-manager
    depends_on:
      - kafka
      - zookeeper
    ports:
      - "9000:9000"
    environment:
      ZK_HOSTS: "zookeeper:2181"
      APPLICATION_SECRET: "random-secret"
    networks:
      - kafka-network

  # 初始化脚本容器
  kafka-init:
    image: confluentinc/cp-kafka:7.4.0
    container_name: chatLion-kafka-init
    depends_on:
      kafka:
        condition: service_healthy
    command: |
      bash -c '
      echo "等待Kafka启动..."
      sleep 10
      
      echo "创建聊天消息主题..."
      kafka-topics --create --if-not-exists --topic chat-messages --bootstrap-server kafka:29092 --partitions 3 --replication-factor 1
      
      echo "创建用户事件主题..."
      kafka-topics --create --if-not-exists --topic user-events --bootstrap-server kafka:29092 --partitions 3 --replication-factor 1
      
      echo "创建群组消息主题..."
      kafka-topics --create --if-not-exists --topic group-messages --bootstrap-server kafka:29092 --partitions 3 --replication-factor 1
      
      echo "列出所有主题:"
      kafka-topics --list --bootstrap-server kafka:29092
      
      echo "主题创建完成!"
      '
    networks:
      - kafka-network

volumes:
  zookeeper-data:
    driver: local
  zookeeper-logs:
    driver: local
  kafka-data:
    driver: local
  redis-data:
    driver: local


networks:
  kafka-network:
    driver: bridge